package com.proxyme.rider;

import com.intellij.openapi.components.Service;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.SystemInfo;
import com.proxyme.rider.ProxyMeSettings;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.attribute.PosixFilePermission;
import java.util.Date;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * ProxyMe Env File Service
 * Manages .env files in shared proxy directory (NOT per-project).
 *
 * Version 2.0.0 changes:
 * - Reads API keys from model configurations
 * - Implements chmod 600 for security
 * - Generates .env in shared ~/.proxyme/proxy/ directory
 */
@Service(Service.Level.APP)
public final class ProxyMeEnvFileService {

    private static final Logger LOG = Logger.getInstance(
        ProxyMeEnvFileService.class
    );

    /**
     * Get the .env file location (shared proxy directory).
     * Version 2.0: Shared across all projects in ~/.proxyme/proxy/.env
     */
    public File getEnvFile(Project project) {
        String userHome = System.getProperty("user.home");
        File proxyDir = new File(userHome, ".proxyme/proxy");
        if (!proxyDir.exists()) {
            proxyDir.mkdirs();
        }
        return new File(proxyDir, ".env");
    }

    /**
     * Generate .env file from settings.
     * Version 2.0: Reads API keys from model configurations.
     */
    public void generateEnvFile(Project project, ProxyMeSettings settings)
        throws IOException {
        File envFile = getEnvFile(project);

        StringBuilder envContent = new StringBuilder();
        envContent.append("# ProxyMe Environment Configuration\n");
        envContent.append("# Generated by ProxyMe Plugin\n");
        envContent.append("# Generated: ").append(new Date()).append("\n");
        envContent.append("# DO NOT COMMIT THIS FILE\n");
        envContent.append(
            "# This file is secured with chmod 600 (owner read/write only)\n\n"
        );

        // Add port configuration
        envContent.append("# Proxy Configuration\n");
        envContent.append("PORT=").append(settings.proxyPort).append("\n");
        envContent.append("HOST=").append(settings.proxyHost).append("\n\n");

        // Add API keys from model configurations
        // Group by provider to avoid duplicate keys
        Map<String, String> apiKeysByProvider = new HashMap<>();

        if (settings.models != null) {
            for (ProxyMeSettings.ModelConfig model : settings.models) {
                if (
                    model.enabled &&
                    model.apiKey != null &&
                    !model.apiKey.isEmpty()
                ) {
                    String provider = model.apiProvider.toLowerCase();
                    // Only store first key per provider (they should all be the same)
                    if (!apiKeysByProvider.containsKey(provider)) {
                        apiKeysByProvider.put(provider, model.apiKey);
                    }
                }
            }
        }

        // Write DeepSeek API key
        envContent.append("# DeepSeek API Configuration\n");
        envContent.append(
            "# Get your API key from: https://platform.deepseek.com/\n"
        );
        if (apiKeysByProvider.containsKey("deepseek")) {
            envContent
                .append("DEEPSEEK_API_KEY=")
                .append(apiKeysByProvider.get("deepseek"))
                .append("\n\n");
            LOG.info("DeepSeek API key configured");
        } else {
            envContent.append("# DEEPSEEK_API_KEY=your_deepseek_key_here\n\n");
            LOG.warn("DeepSeek API key not configured");
        }

        // Write Perplexity API key
        envContent.append("# Perplexity API Configuration\n");
        envContent.append(
            "# Get your API key from: https://www.perplexity.ai/settings/api\n"
        );
        if (apiKeysByProvider.containsKey("perplexity")) {
            envContent
                .append("PERPLEXITY_API_KEY=")
                .append(apiKeysByProvider.get("perplexity"))
                .append("\n\n");
            LOG.info("Perplexity API key configured");
        } else {
            envContent.append(
                "# PERPLEXITY_API_KEY=your_perplexity_key_here\n\n"
            );
            LOG.warn("Perplexity API key not configured");
        }

        // Write Anthropic API key
        envContent.append("# Anthropic API Configuration\n");
        envContent.append(
            "# Get your API key from: https://console.anthropic.com/\n"
        );
        if (apiKeysByProvider.containsKey("anthropic")) {
            envContent
                .append("ANTHROPIC_API_KEY=")
                .append(apiKeysByProvider.get("anthropic"))
                .append("\n\n");
            LOG.info("Anthropic API key configured");
        } else {
            envContent.append(
                "# ANTHROPIC_API_KEY=your_anthropic_key_here\n\n"
            );
            LOG.warn("Anthropic API key not configured");
        }

        // Write OpenAI API key
        envContent.append("# OpenAI API Configuration\n");
        envContent.append(
            "# Get your API key from: https://platform.openai.com/api-keys\n"
        );
        if (apiKeysByProvider.containsKey("openai")) {
            envContent
                .append("OPENAI_API_KEY=")
                .append(apiKeysByProvider.get("openai"))
                .append("\n\n");
            LOG.info("OpenAI API key configured");
        } else {
            envContent.append("# OPENAI_API_KEY=your_openai_key_here\n\n");
            LOG.warn("OpenAI API key not configured");
        }

        // Write debug mode setting
        envContent.append("# Debug Mode\n");
        envContent.append("DEBUG=true\n");

        // Write to file
        try (FileWriter writer = new FileWriter(envFile)) {
            writer.write(envContent.toString());
        }

        // Secure the file with chmod 600 (owner read/write only)
        secureEnvFile(envFile);

        LOG.info("Generated .env file: " + envFile.getAbsolutePath());
    }

    /**
     * Secure the .env file with chmod 600 (owner read/write only).
     * This prevents other users on the system from reading API keys.
     */
    private void secureEnvFile(File envFile) {
        try {
            if (!SystemInfo.isWindows) {
                // Unix/Linux/macOS: Use POSIX permissions (chmod 600)
                Set<PosixFilePermission> perms = EnumSet.of(
                    PosixFilePermission.OWNER_READ,
                    PosixFilePermission.OWNER_WRITE
                );
                Files.setPosixFilePermissions(envFile.toPath(), perms);
                LOG.info(
                    "Set .env file permissions to 600 (owner read/write only)"
                );
            } else {
                // Windows: Set file to owner-only access
                envFile.setReadable(false, false); // Remove read for everyone
                envFile.setWritable(false, false); // Remove write for everyone
                envFile.setExecutable(false, false); // Remove execute for everyone

                envFile.setReadable(true, true); // Add read for owner only
                envFile.setWritable(true, true); // Add write for owner only

                LOG.info("Set .env file to owner-only permissions (Windows)");
            }
        } catch (Exception e) {
            LOG.warn("Failed to set secure permissions on .env file", e);
            // Don't fail the entire operation if we can't set permissions
        }
    }

    /**
     * Get the directory where .env files are stored.
     * Version 2.0: Returns shared proxy directory.
     */
    public File getEnvDirectory() {
        String userHome = System.getProperty("user.home");
        File dir = new File(userHome, ".proxyme/proxy");
        if (!dir.exists()) {
            dir.mkdirs();
        }
        return dir;
    }

    /**
     * Validate that API keys are configured for enabled models.
     *
     * @param settings The settings to validate
     * @return true if at least one enabled model has an API key
     */
    public boolean validateApiKeys(ProxyMeSettings settings) {
        if (settings.models == null || settings.models.isEmpty()) {
            LOG.warn("No models configured");
            return false;
        }

        int enabledModels = 0;
        int modelsWithKeys = 0;

        for (ProxyMeSettings.ModelConfig model : settings.models) {
            if (model.enabled) {
                enabledModels++;
                if (model.apiKey != null && !model.apiKey.isEmpty()) {
                    modelsWithKeys++;
                }
            }
        }

        if (enabledModels == 0) {
            LOG.warn("No models enabled");
            return false;
        }

        if (modelsWithKeys == 0) {
            LOG.warn("No API keys configured for enabled models");
            return false;
        }

        LOG.info(
            "API keys validated: " +
                modelsWithKeys +
                "/" +
                enabledModels +
                " enabled models have keys"
        );
        return true;
    }
}
